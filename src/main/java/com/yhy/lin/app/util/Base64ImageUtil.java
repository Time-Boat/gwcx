package com.yhy.lin.app.util;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;

public class Base64ImageUtil {
	
	public static void main(String[] args) {
		//String strImg = GetImageStr("d://test.png" + "");
		String	strImg = "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";
		long l = System.currentTimeMillis();
		System.out.println(strImg.length() / 1024);
		System.out.println((System.currentTimeMillis() - l));
		try {
			System.out.println(generateImage(strImg,"E:\\a.png"));
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	// 图片转化成base64字符串
	public static String getImageStr(String path) {// 将图片文件转化为字节数组字符串，并对其进行Base64编码处理
		String imgFile = path;// 待处理的图片
		InputStream in = null;
		byte[] data = null;
		// 读取图片字节数组
		try {
			if (path == null || "".equals(path))
				return "";
			in = new FileInputStream(imgFile);
			data = new byte[in.available()];
			in.read(data);
			in.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
		// 对字节数组Base64编码
		BASE64Encoder encoder = new BASE64Encoder();
		return encoder.encode(data);// 返回Base64编码过的字节数组字符串
	}

	// base64字符串转化成图片
	public static boolean generateImage(String imgStr,String imgPath) throws IOException { // 对字节数组字符串进行Base64解码并生成图片
		if (imgStr == null) // 图像数据为空
			return false;
		BASE64Decoder decoder = new BASE64Decoder();
		// Base64解码
		byte[] b = decoder.decodeBuffer(imgStr);
		for (int i = 0; i < b.length; ++i) {
			if (b[i] < 0) {// 调整异常数据
				b[i] += 256;
			}
		}
		// 生成jpeg图片
		/*String imgFilePath = "E:/apache-tomcat-7.0.63/webapps/admin/attachment/vop/image/test22.jpg";// 新生成的图片
		CreateFileUtil.createDir("E:/apache-tomcat-7.0.63/webapps/admin/attachment/vop/image");*/
//		File file = new File(imgPath);
//		if(!file.exists()){
//			file.mkdirs();
//		}
		OutputStream out = new FileOutputStream(imgPath);
		
		out.write(b);
		out.flush();
		out.close();
		return true;
	}
}
